// Importa o m√≥dulo 'fs' (File System) para manipula√ß√£o de arquivos
const fs = require('fs');
// Importa o m√≥dulo 'path' para trabalhar com caminhos de arquivos e diret√≥rios
const path = require('path');

// Configura√ß√µes do projeto - objeto que armazena todas as configura√ß√µes necess√°rias
const config = {
  // Nome do arquivo de sa√≠da que conter√° os metadados
  outputFile: 'files_metadata.json',
  
  // Lista de arquivos que devem ser exclu√≠dos do processamento
  excludedFiles: [
    'index.html',
    'style.css',
    'script.js',
    '.gitlab-ci.yaml',
    'files_metadata.json',
    'generate_metadata.js',
    'package.json',
    'package-lock.json',
    '.gitlab-ci.yml',
    '.gitignore',
    'Gemfile',
    '_config.yml',
    'README.md',
    'playlists.py',
    'playlists2.py',
    'Playlist.py',
    'requirements.txt',
    'Playlists.log',
    'Gemfile.lock'
  ],
  
  // Nome de usu√°rio no GitHub (para constru√ß√£o das URLs de download)
  githubUser: 'josieljefferson12',
  
  // Nome do reposit√≥rio no GitHub
  githubRepo: 'playlists.github.io',
  
  // Branch do reposit√≥rio (usa a vari√°vel de ambiente CI_COMMIT_REF_NAME se existir, ou 'main' como padr√£o)
  branch: process.env.CI_COMMIT_REF_NAME || 'main'
};

// Fun√ß√£o para formatar o tamanho do arquivo em unidades leg√≠veis (KB, MB, GB, etc.)
function formatarTamanho(bytes) {
  // Caso o tamanho seja zero, retorna imediatamente
  if (bytes === 0) return '0 Byte';
  
  // Define a base para c√°lculo (1024 bytes = 1KB)
  const k = 1024;
  
  // Array com as unidades de medida
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  
  // Calcula o √≠ndice da unidade apropriada usando logaritmo
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  // Calcula o valor formatado com 2 casas decimais e concatena com a unidade
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2) + ' ' + sizes[i];
}

// Fun√ß√£o para formatar datas no formato DD/MM/YYYY - HH:MM:SS.SSS
function formatarData(date) {
  // Cria um objeto Date a partir do par√¢metro recebido
  const d = new Date(date);
  
  // Obt√©m e formata o dia com 2 d√≠gitos
  const dia = String(d.getDate()).padStart(2, '0');
  
  // Obt√©m e formata o m√™s (adiciona 1 pois janeiro √© 0)
  const mes = String(d.getMonth() + 1).padStart(2, '0');
  
  // Obt√©m o ano completo
  const ano = d.getFullYear();

  // Obt√©m e formata as horas com 2 d√≠gitos
  const horas = String(d.getHours()).padStart(2, '0');
  
  // Obt√©m e formata os minutos com 2 d√≠gitos
  const minutos = String(d.getMinutes()).padStart(2, '0');
  
  // Obt√©m e formata os segundos com 2 d√≠gitos
  const segundos = String(d.getSeconds()).padStart(2, '0');
  
  // Obt√©m e formata os milissegundos com 3 d√≠gitos
  const milissegundos = String(d.getMilliseconds()).padStart(3, '0');

  // Retorna a data formatada no padr√£o brasileiro com hora completa
  return `${dia}/${mes}/${ano} - ${horas}:${minutos}:${segundos}.${milissegundos}`;
}

// Fun√ß√£o principal para obter os metadados dos arquivos locais
function getLocalFiles() {
  // L√™ o conte√∫do do diret√≥rio atual de forma s√≠ncrona
  // withFileTypes: true retorna objetos fs.Dirent em vez de strings
  const allFiles = fs.readdirSync('.', { withFileTypes: true });

  // Processa a lista de arquivos:
  return allFiles
    // Filtra apenas entradas que s√£o arquivos (n√£o diret√≥rios)
    .filter(dirent => dirent.isFile())
    
    // Mapeia para obter apenas os nomes dos arquivos
    .map(dirent => dirent.name)
    
    // Filtra os arquivos exclu√≠dos na configura√ß√£o
    .filter(file => !config.excludedFiles.includes(file))
    
    // Mapeia cada arquivo para um objeto de metadados
    .map(file => {
      // Obt√©m as estat√≠sticas do arquivo (tamanho, datas, etc.)
      const stats = fs.statSync(file);
      
      // Retorna um objeto com todas as informa√ß√µes do arquivo
      return {
        nome: file, // Nome do arquivo
        caminho: file, // Caminho do arquivo (relativo)
        tamanho: formatarTamanho(stats.size), // Tamanho formatado
        ultima_modificacao: formatarData(stats.mtime), // Data de modifica√ß√£o formatada
        // URL para download no GitHub (usando as configura√ß√µes)
        download_url: `https://raw.githubusercontent.com/${config.githubUser}/${config.githubRepo}/${config.branch}/${file}`,
        // Extens√£o do arquivo (sem o ponto), ou 'file' se n√£o tiver extens√£o
        tipo_arquivo: path.extname(file).toLowerCase().replace('.', '') || 'file'
      };
    });
}

// Fun√ß√£o principal que orquestra a gera√ß√£o dos metadados
function generateMetadata() {
  try {
    // Mensagem inicial indicando o in√≠cio do processo
    console.log('‚è≥ Iniciando gera√ß√£o de metadados...');

    // Obt√©m os metadados de todos os arquivos
    const filesMetadata = getLocalFiles();

    // Escreve o arquivo de sa√≠da com os metadados em formato JSON
    // path.join(__dirname, config.outputFile) cria o caminho absoluto
    // JSON.stringify com null e 2 formata o JSON com indenta√ß√£o de 2 espa√ßos
    fs.writeFileSync(
      path.join(__dirname, config.outputFile),
      JSON.stringify(filesMetadata, null, 2)
    );

    // Mensagem de sucesso com o nome do arquivo gerado
    console.log(`‚úÖ Metadados gerados com sucesso em ${config.outputFile}`);
    
    // Informa quantos arquivos foram processados
    console.log(`üìä Total de arquivos processados: ${filesMetadata.length}`);

    // Lista detalhada dos arquivos inclu√≠dos (para debug)
    console.log('üìù Arquivos inclu√≠dos:');
    filesMetadata.forEach(file => {
      console.log(`- ${file.name} (${file.file_type})`);
    });

  } catch (error) {
    // Em caso de erro, exibe mensagem detalhada e encerra o processo com c√≥digo 1 (erro)
    console.error('‚ùå Erro ao gerar metadados:', error);
    process.exit(1);
  }
}

// Chama a fun√ß√£o principal para iniciar o processo
generateMetadata();